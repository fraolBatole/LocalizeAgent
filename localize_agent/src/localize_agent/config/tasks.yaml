planning_task:
  description: >
    Create a brief, step-by-step analysis plan that includes:
    1. Design Issue Identification Phase:
       - Specify which code elements to analyze (classes, methods, dependencies)
       - Define criteria for identifying modularity, complexity, and information hiding issues
       - List specific metrics to measure (e.g., coupling, cohesion)
    
    2. Code Analysis Phase:
       - Specify dependencies and relationships to examine
    
    3. Prompt Engineering Phase:
       - Outline key elements to include in the analysis summary
       - Define criteria for selecting code sections to refactor
    
    4. Issue Localization Phase:
       - Define priority criteria for selecting refactoring targets
       - Specify validation checks for proposed refactorings

    5. Ranking Phase:
       - Define criteria for ranking refactoring suggestions based on impact and feasibility
  
  expected_output: >
    A structured analysis plan document containing: Issue Identification Strategy, Analysis Execution Plan, Prompt Construction Guidelines, Localization Criteria, and Ranking Strategy. Each section should be clearly defined and actionable.:

  agent: planning_agent

design_issue_identification_task:
  description: >
    Conduct an initial review of the code to identify design issues from the following categories: "modularity", "complexity", and "information hiding". Suggest an appropriate refactoring type based on the identified issue(s), selected from "move method", "parameterize variable", "inline variable", or "inline method". The output must be structured and easily parsable for subsequent tasks.
  expected_output: >
    A JSON object with two keys:
    - "design_issues": an array of one or more design issue types, each being one of "modularity", "complexity", or "information hiding".
    - "refactoring": a string that is exactly one of "move method", "parameterize variable", "inline variable", or "inline method".
    Do not include any extra data.
  agent: design_issue_identification_agent

code_analysis_task:
  description: >
    Using the planning instructions and the output from the design_issue_identification_agent (which provides the identified design issues and the corresponding refactoring recommendation), perform a targeted analysis of the provided code. Focus on relevant metrics such as fan-in/fan-out, method call dependencies, variable usage, and class coupling. Use the CountMethods tool to determine the number of methods and the VariableUsage tool to analyze variable usage. 

    The first output should provide reasoning over the results from these tools, explaining how the metrics relate to the identified design issue and the suggested refactoring type. Clearly correlate these metrics with the design issue to assess the impact on the code. The instructions are designed to be explicit, unambiguous, and robust to guide subsequent refactoring efforts.

  expected_output: >
    A comprehensive and structured analysis report that includes:
      - Reasoning over the tool outputs, explaining their relevance to the identified design issue.
      - Quantitative metrics (e.g., fan-in, fan-out, dependency counts) relevant to the design issue.
      - The number of methods within the project based on the CountMethods tool.
      - Qualitative commentary on how these metrics reflect the impact of the identified design issue.
      - A clear explanation linking the analysis results with the recommended refactoring type.
  agent: code_analyzer_agent

prompt_engineering_task:
  description: >
    Based on the outputs from the design issue identification and code analysis tasks, create a clear and actionable prompt for the design_issue_localization_agent. Use the answer from the code_analysis_task/agent to get the recommended refactoring type, design issue type, and analysis summary. Your task is to construct a dictionary called "prompt" with three keys:
      - "query": A clear question asking which class, function, or variable should be refactored using [refactoring type] to resolve the identified design issue [design_issues]. The query should not contain a class name, but rather puts it as a question.
      - "code_snippet": the whole input code {code}.
      - "analysis_summary": A concise summary of the code analysis findings, including key metrics and their relation to the identified design issue and refactoring recommendation. This summary should be detailed enough to guide the localization agent but avoid unnecessary verbosity.
    The instructions must be explicit, unambiguous, and robust to guide the localization process accurately.
  expected_output: >
    A dictionary named "prompt" structured as follows:
    {
      "query": "Which class, function, or variable should be refactored to address the identified design issue?",
      "code_snippet": {code},
      "analysis_summary": "A summary of the code analysis findings, including key metrics and their relation to the identified design issue and refactoring recommendation."
    }
  agent: prompt_engineering_agent

design_issue_localization_task:
  description: >
    Utilize the prompt provided by the prompt_engineering_task to identify the specific locations in the code that require refactoring. Analyze the "prompt" dictionary, follow its instructions, and determine the class and method (or variable, if applicable) that need to be refactored. If there are multiple functions or locations to refactor, generate a separate JSON/dict for each. The output must be formatted as a list of JSON/dict objects, where each object contains exactly the following keys: "Class name", "Function name", "Function signature", "refactoring_type", and "rationale". This output should instruct the developer on where to apply the refactoring.
  expected_output: >
    A list of JSON/dict objects, each formatted exactly as follows:
    {
      "Class name": "Identified class name",
      "Function name": "Identified function name",
      "Function signature": "Identified function signature",
      "refactoring_type": "One of move method, parameterize variable, inline variable, or inline method",
      "rationale": "Brief explanation of why this location needs refactoring"
    }
    Do not include any extra information.
  agent: design_issue_localization_agent

ranking_task:
  description: >
    Rank the outputs from the design_issue_localization_agent based on their importance. The ranking should consider the analysis results and the recommended refactoring type. Each output should include an additional key called "rank" that assigns a rank to the item. Start ranking them from 1.
  expected_output: >
    A list of JSON/dict objects, each formatted exactly as follows:
    {
      "Class name": "Identified class name",
      "Function name": "Identified function name",
      "Function signature": "Identified function signature",
      "refactoring_type": "One of move method, parameterize variable, inline variable, or inline method",
      "rationale": "Brief explanation of why this location needs refactoring",
      "rank": "An integer representing the rank of this item"
    }
    The rank should be assigned based on the importance of the refactoring target.
  agent: ranking_agent
